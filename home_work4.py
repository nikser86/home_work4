import re

# Задание 1 (на исключения)
# Напишите программу, которая запрашивает ввод двух значений.
# Если хотя бы одно из них не является числом (любым), то должна выполняться конкатенация,
# т. е. соединение, строк. В остальных случаях введённые числа суммируются.
x = 321.1
y = 20.2
try:
    s = x + y
except TypeError as e:  # в e запишется сообщение исключения
    print(y, x)
else:
    print(s)

#
# Задание 2. (на функции)
#
# 1)	Написать функцию is_year_leap, принимающую 1 аргумент — год, и возвращающую True,
# если год високосный, и False иначе.
a = 2021


def year(a):
    if (a % 4 == 0) and (a % 100 != 0) or (a % 400 == 0):
        b = True
    else:
        b = False
    return b


if year(a):
    print('Год ', a, " высокосный")
else:
    print('Год', a, "не высокосный")

# 2)	Функция принимает три числа a, b, c. Функция должна определить,
# существует ли треугольник с такими сторонами. Если треугольник существует, вернёт True, иначе False.
a = 5
b = 3
c = 4


def triangle(a, b, c):
    if (a + b > c) and (b + c > a) and (a + c > b):
        r = True
    else:
        r = False
    return r


if triangle(a, b, c):
    print("треугольник с такими сторонами {0} {1} {2} существует ".format(a, b, c))
else:
    print("треугольник с такими сторонами {0} {1} {2} не существует ".format(a, b, c))

# 3)	Функция принимает три числа a, b, c. Функция должна определить,
# существует ли треугольник с такими сторонами и если существует, то возвращает тип треугольника
# Equilateral triangle (равносторонний), Isosceles triangle (равнобедренный),
# Versatile triangle (разносторонний) или не треугольник (Not a triangle).
a = 5
b = 4
c = 3


def trng(a, b, c):
    if (a + b > c) and (b + c > a) and (a + c > b):
        if a == b == c:
            res = "Equilateral triangle"
        elif (a == b) or (a == c) or (b == c):
            res = "Isosceles triangle"
        else:
            res = 'Versatile triangle'
    else:
        res = "Not a triangle"
    return res


s = trng(a, b, c)
print(s)

# 4)	Даны четыре действительных числа: x1, y1, x2, y2.
# Напишите функцию distance(x1, y1, x2, y2), вычисляющую расстояние между точками с координатами (x1, y1) и (x2, y2).
# *Считайте четыре действительных числа от пользователя (перед запуском функции, не внутри функции)
# и выведите результат работы этой функции.
x1 = 3
y1 = 2
x2 = 5
y2 = 8


def distance(a, b):
    r1 = a - b
    return r1


res1 = distance(x1, y1)
res2 = distance(x2, y2)
print("Растояние между {0} и {1} ровно {2} \nРастояние между {3} и {4} ровно {5}".format(x1, y1, res1, x2, y2, res2))


#
# ** Задание 3
# Оформляем в функции наши задания с урока и предыдущих ДЗ:
# 5)	Пишем функцию, которая попросит ввести число. Пока он не введёт правильно, просите его ввести.
# Функция возвращает введённое число.
# * Теперь далее для других задач с числами, вы можете пользоваться этой функцией, а не простым input!
def inp_number():
    while True:
        number = input("Enter number: ")
        try:
            number = float(number)
        except ValueError:
            pass
        else:
            return number


# n=inp_number()
# print("You enter: ",n)


# 6)	Пишем функцию, которая попросит пользователя ввести слово
# (строка из буквенных символов без пробелов в середине, а вначале и в конце пробелы могут быть).
# Пока он не введёт правильно, просите его ввести. Функция возвращает введённое слово.

def inp_word():
    while True:
        s = input("Enter word: ")
        l = s.strip(" ")
        if l.isalpha():
            return s
            break
        else:
            pass


#wr = inp_word()
#print(wr)






# Задание 4. (на функции со значениями по умолчанию)
# Пишем функцию, которая генерирует песню la-la-la. Функция принимает 3 аргумента:
#
# 1-е число – сколько строк будет в песне. По умолчанию 3
# 2-е число – сколько «la» будет в строке («la» в строке объединяются дефисом). По умолчанию 3
# 3-е число – если 0, то в конце песни (в конце последней строчки) стоит точка, если 1, то в конце стоит «!».
# По умолчанию 0
#
def song(line=3, la=3, wow=0):
    for key in range(line-1):
        print('la-'*(la),'\b\b')
    if key == line-2:
        if wow==1:
            print('la-'*(la),'\b\b!')
        else:
            print('la-'*(la), '\b\b.')

song(2,10,1)

#
# Задание 5
# Google задания. Прикреплены отдельно. В этих файлах вы должны реализовать функции, которые описаны в комментариях.
# В list1.py задание С. sort_last для вас сложное, только для продвинутых.
# Дополнительно: В этих заданиях используется старый стиль форматирования строк. Переделайте их на новый стиль (используя метод строк format или f-строки. Конечно, его надо тогда изучить https://pythonworld.ru/osnovy/formatirovanie-strok-metod-format.html и https://shultais.education/blog/python-f-strings)
# Кому заданий мало, вышлю ещё парочку Google заданий.

# Сделаю позже 
